package com.samourai.whirlpool.protocol.FeePayloadV1;

import com.samourai.whirlpool.protocol.AbstractTest;
import com.samourai.whirlpool.protocol.feePayload.FeePayloadV1;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class FeePayloadV1Test extends AbstractTest {

  @Test
  public void computeFeePayload_46() throws Exception {
    // feeVersion:short(2) | indice:int(4) | feePayload:short(2) | feePartner:short(2)

    // without feePayload
    String feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(0, (short) 0, (short) 0, feePayload, 46);

    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(1, (short) 0, (short) 0, feePayload, 46);

    feePayload =
        "00000000 00000001 00000000 00000001 11100010 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(123456, (short) 0, (short) 0, feePayload, 46);

    // with feePayload
    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(0, (short) 1, (short) 0, feePayload, 46);

    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(1, (short) 1, (short) 0, feePayload, 46);

    feePayload =
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(123456, (short) 257, (short) 0, feePayload, 46);

    // with feePartner
    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(0, (short) 0, (short) 1, feePayload, 46);

    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000011 00111010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(1, (short) 1, (short) 826, feePayload, 46);

    feePayload =
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00110000 00111001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(123456, (short) 257, (short) 12345, feePayload, 46);
  }

  private void doComputeFeePayload(
      int feeIndice,
      short scodePayload,
      short partnerPayload,
      String feePayloadStr,
      int FEE_PAYLOAD_LENGTH)
      throws Exception {
    Assertions.assertEquals(
        feePayloadStr,
        bytesToBinaryString(
            new FeePayloadV1(feeIndice, scodePayload, partnerPayload)
                .computeBytes(FEE_PAYLOAD_LENGTH)));

    byte[] feePayloadBytes = bytesFromBinaryString(feePayloadStr);
    Assertions.assertEquals(feePayloadBytes.length, FEE_PAYLOAD_LENGTH);

    FeePayloadV1 feePayload = FeePayloadV1.parse(feePayloadBytes);
    Assertions.assertEquals(feeIndice, feePayload.getFeeIndice());
    Assertions.assertEquals(scodePayload, feePayload.getScodePayload());
    Assertions.assertEquals(partnerPayload, feePayload.getFeePartner());
  }
}
