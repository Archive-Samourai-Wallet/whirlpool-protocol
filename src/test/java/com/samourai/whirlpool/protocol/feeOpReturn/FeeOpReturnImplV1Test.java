package com.samourai.whirlpool.protocol.feeOpReturn;

import com.samourai.wallet.bip47.rpc.BIP47Account;
import com.samourai.wallet.segwit.SegwitAddress;
import com.samourai.whirlpool.protocol.AbstractTest;
import com.samourai.whirlpool.protocol.feePayload.FeePayloadV1;
import java.math.BigInteger;
import org.bitcoinj.core.ECKey;
import org.bitcoinj.core.TransactionOutPoint;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class FeeOpReturnImplV1Test extends AbstractTest {
  protected static String SEED_WORDS_V1 =
      "test test test test test test test test test test test junk";
  protected static String SEED_PASSPHRASE_V1 = "test";
  private static String PCODE_V1 =
      "PM8TJVGXADoSSFmre2HstFraDFYT35K7ccGLMoLMkKS5xMSooWe6RYJBsjqic77EyLs9ULP5unaCajCA2VNVjvETQqyoDEF59dcyGL1riWbk9AwNfAN1";

  private static ECKey pk =
      ECKey.fromPrivate(
          new BigInteger(
              "34069012401142361066035129995856280497224474312925604298733347744482107649210"));

  private FeeOpReturnImplV1 feeOpReturnImpl;
  private BIP47Account bip47Account;

  @BeforeEach
  public void setup() throws Exception {
    bip47Account = computeBip47Account(SEED_WORDS_V1, SEED_PASSPHRASE_V1, PCODE_V1);
    feeOpReturnImpl =
        new FeeOpReturnImplV1(xorMask) {
          @Override
          protected byte[] generateMaskingPrivKey() {
            return pk.getPrivKeyBytes(); // static key for reproductible test
          }
        };
  }

  @Test
  public void computeFeePayload() throws Exception {
    // feeVersion:short(2) | indice:int(4) | feePayload:short(2) | feePartner:short(2)

    // without feePayload
    String feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(0, (short) 0, (short) 0, feePayload);

    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(1, (short) 0, (short) 0, feePayload);

    feePayload =
        "00000000 00000001 00000000 00000001 11100010 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(123456, (short) 0, (short) 0, feePayload);

    // with feePayload
    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(0, (short) 1, (short) 0, feePayload);

    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(1, (short) 1, (short) 0, feePayload);

    feePayload =
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(123456, (short) 257, (short) 0, feePayload);

    // with feePartner
    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(0, (short) 0, (short) 1, feePayload);

    feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000011 00111010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(1, (short) 1, (short) 826, feePayload);

    feePayload =
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00110000 00111001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    doComputeFeePayload(123456, (short) 257, (short) 12345, feePayload);
  }

  private void doComputeFeePayload(
      int feeIndice, short scodePayload, short partnerPayload, String feePayloadStr)
      throws Exception {
    Assertions.assertEquals(
        feePayloadStr,
        bytesToBinaryString(
            feeOpReturnImpl.computeFeePayload(feeIndice, scodePayload, partnerPayload)));

    byte[] feePayloadBytes = bytesFromBinaryString(feePayloadStr);
    Assertions.assertEquals(feePayloadBytes.length, feeOpReturnImpl.feePayloadLength);

    FeePayloadV1 feePayload = FeePayloadV1.parse(feePayloadBytes);
    Assertions.assertEquals(feeIndice, feePayload.getFeeIndice());
    Assertions.assertEquals(scodePayload, feePayload.getScodePayload());
    Assertions.assertEquals(partnerPayload, feePayload.getFeePartner());
  }

  @Test
  public void computeOpReturn() throws Exception {
    String feePayload =
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    String expectedOpReturn =

    doComputeOpReturn(feePayload, expectedOpReturn);

    feePayload =
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00110000 00111001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000";
    expectedOpReturn =

    doComputeOpReturn(feePayload, expectedOpReturn);
  }

  public void doComputeOpReturn(String feePayloadStr, String expectedOpReturn) throws Exception {
    byte[] feePayloadBytes = bytesFromBinaryString(feePayloadStr);
    System.err.println("feePayloadBytes: " + bytesToBinaryString(feePayloadBytes));
    Assertions.assertEquals(feeOpReturnImpl.feePayloadLength, feePayloadBytes.length);

    // encode
    SegwitAddress segwitAddress = new SegwitAddress(pk, params);
    TransactionOutPoint outPoint = mockTxOutput(segwitAddress).getOutPointFor();
    String feePaymentCode = bip47Account.getPaymentCode();
    byte[] opReturn =
        feeOpReturnImpl.computeOpReturn(feePaymentCode, feePayloadBytes, outPoint, null);
    String opReturnStr = bytesToBinaryString(opReturn);
    System.err.println("opReturn: " + bytesToBinaryString(opReturn));
    Assertions.assertEquals(expectedOpReturn, opReturnStr);
    Assertions.assertEquals(opReturn.length, feeOpReturnImpl.opReturnLength);

    // verify feePayloadMasked
    byte[] feePayloadMasked = feeOpReturnImpl.extractFeePayloadMasked(opReturn);
    System.err.println("feePayloadMasked: " + bytesToBinaryString(feePayloadMasked));
    Assertions.assertEquals(feeOpReturnImpl.feePayloadLength, feePayloadMasked.length);

    // verify signingPublicKey
    byte[] signingPublickey = feeOpReturnImpl.extractSigningPublicKey(opReturn);
    System.err.println("signingPublickey: " + bytesToBinaryString(signingPublickey));
    Assertions.assertEquals(feeOpReturnImpl.SIGNING_KEY_LENGTH, signingPublickey.length);
    Assertions.assertArrayEquals(pk.getPubKey(), signingPublickey);

    Assertions.assertEquals(
        feeOpReturnImpl.feePayloadLength
            + feeOpReturnImpl.SIGNING_KEY_LENGTH
            + feeOpReturnImpl.OP_RETURN_VERSION_LENGTH,
        feeOpReturnImpl.opReturnLength);

    // decode
    FeeOpReturn feeOpReturn =
        feeOpReturnImpl.parseOpReturn(opReturn, bip47Account, outPoint, pk.getPubKey());
    Assertions.assertEquals(feePayloadBytes.length, feeOpReturnImpl.feePayloadLength);
    Assertions.assertEquals(feePayloadStr, bytesToBinaryString(feeOpReturn.getFeePayload()));
    Assertions.assertArrayEquals(feePayloadBytes, feeOpReturn.getFeePayload());
    Assertions.assertEquals(feeOpReturnImpl.opReturnVersion, feeOpReturn.getOpReturnVersion());
  }
}
